import java.util.Arrays;
import java.util.Random;

public class KohonenNetwork {
    private double[][] weights; // Веса нейронов
    private int numInputs;      // Количество входов (размерность входа)
    private int numNeurons;     // Количество нейронов в сети
    private double learningRate; // Коэффициент обучения

    // Конструктор для инициализации сети
    public KohonenNetwork(int numInputs, int numNeurons, double learningRate) {
        this.numInputs = numInputs;
        this.numNeurons = numNeurons;
        this.learningRate = learningRate;
        this.weights = new double[numNeurons][numInputs];
        initializeWeights();
    }

    // Инициализация весов случайными значениями
    private void initializeWeights() {
        Random rand = new Random();
        for (int i = 0; i < numNeurons; i++) {
            for (int j = 0; j < numInputs; j++) {
                weights[i][j] = rand.nextDouble();
            }
        }
    }

    // Функция активации (вычисление расстояния между входом и весами нейронов)
    private double distance(double[] input, double[] weights) {
        double sum = 0;
        for (int i = 0; i < input.length; i++) {
            sum += Math.pow(input[i] - weights[i], 2);
        }
        return Math.sqrt(sum);
    }

    // Поиск нейрона с минимальным расстоянием
    private int findBestMatchingUnit(double[] input) {
        int bestIndex = 0;
        double minDistance = distance(input, weights[0]);

        for (int i = 1; i < numNeurons; i++) {
            double dist = distance(input, weights[i]);
            if (dist < minDistance) {
                minDistance = dist;
                bestIndex = i;
            }
        }
        return bestIndex;
    }

    // Обучение сети на одном примере
    public void train(double[] input) {
        int bmuIndex = findBestMatchingUnit(input);
        
        // Обновление весов ближайшего нейрона
        for (int i = 0; i < numInputs; i++) {
            weights[bmuIndex][i] += learningRate * (input[i] - weights[bmuIndex][i]);
        }
    }

    // Метод для получения весов нейронов
    public double[][] getWeights() {
        return weights;
    }

    public static void main(String[] args) {
        // Параметры сети
        int numInputs = 2; // Двумерные данные
        int numNeurons = 3; // Три нейрона
        double learningRate = 0.1;

        KohonenNetwork network = new KohonenNetwork(numInputs, numNeurons, learningRate);
        
        // Примеры для обучения
        double[][] trainingData = {
            {0.2, 0.6},
            {0.9, 0.1},
            {0.4, 0.8},
            {0.3, 0.2},
            {0.8, 0.4}
        };

        // Обучение сети
        for (int epoch = 0; epoch < 100; epoch++) { // Обучение в 100 эпох
            for (double[] input : trainingData) {
                network.train(input);
            }
        }

        // Вывод весов нейронов после обучения
        System.out.println("Weights after training:");
        double[][] weights = network.getWeights();
        for (double[] weight : weights) {
            System.out.println(Arrays.toString(weight));
        }
    }
}
