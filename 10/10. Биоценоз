import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

// Базовый класс для всех агентов
abstract class Agent {
    protected int x; // Координаты
    protected int y;
    protected double energy; // Энергия агента

    public Agent(int x, int y, double energy) {
        this.x = x;
        this.y = y;
        this.energy = energy;
    }

    public abstract void update(); // Метод для обновления статуса агента

    public void move(int dx, int dy) {
        x += dx;
        y += dy;
    }

    public double getEnergy() {
        return energy;
    }

    public void consumeEnergy(double amount) {
        energy -= amount;
    }

    public int getX() { return x; }
    public int getY() { return y; }
}

// Класс для растений
class Plant extends Agent {
    public Plant(int x, int y) {
        super(x, y, 100); // У растений у нас фиксированная энергия
    }

    @Override
    public void update() {
        // Растения могут расти
        energy += 1; // Восстановление энергии
    }
}

// Класс для травоядных
class Herbivore extends Agent {
    private Random random = new Random();

    public Herbivore(int x, int y) {
        super(x, y, 50);
    }

    @Override
    public void update() {
        // Травоядные могут двигаться и поедать растения
        move(random.nextInt(3) - 1, random.nextInt(3) - 1);

        // Здесь может быть логика для поедания растений
        consumeEnergy(1); // Потребление энергии
    }
}

// Класс для хищников
class Predator extends Agent {
    private Random random = new Random();

    public Predator(int x, int y) {
        super(x, y, 70);
    }

    @Override
    public void update() {
        // Хищники могут двигаться и охотиться на травоядных
        move(random.nextInt(3) - 1, random.nextInt(3) - 1);
        consumeEnergy(2); // Потребление энергии
    }
}

class Perceptron {
    private double weight;
    private double bias;

    public Perceptron() {
        this.weight = new Random().nextDouble();
        this.bias = new Random().nextDouble();
    }

    public double predict(double input) {
        return activationFunction(weight * input + bias);
    }

    public void train(double input, double expectedOutput) {
        double prediction = predict(input);
        double error = expectedOutput - prediction;

        // Обновление весов
        weight += 0.1 * error * input; // Learning rate = 0.1
        bias += 0.1 * error; // Learning rate
    }

    private double activationFunction(double value) {
        return value > 0 ? 1 : 0; // Step function
    }
}
// граф интерфейс
public class Ecosystem extends JFrame implements ActionListener {
    private List<Agent> agents; // Список всех агентов
    private Timer timer;

    public Ecosystem() {
        agents = new ArrayList<>();
        for (int i = 0; i < 10; i++) agents.add(new Plant(new Random().nextInt(400), new Random().nextInt(400)));
        for (int i = 0; i < 5; i++) agents.add(new Herbivore(new Random().nextInt(400), new Random().nextInt(400)));
        for (int i = 0; i < 5; i++) agents.add(new Predator(new Random().nextInt(400), new Random().nextInt(400)));

        timer = new Timer(100, this);
        timer.start();

        setSize(500, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        for (Agent agent : agents) {
            agent.update(); // Обновляем состояние каждого агента
        }
        repaint(); // Перерисовываем
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponents(g);
        for (Agent agent : agents) {
            if (agent instanceof Plant) {
                g.setColor(Color.GREEN);
            } else if (agent instanceof Herbivore) {
                g.setColor(Color.YELLOW);
            } else if (agent instanceof Predator) {
                g.setColor(Color.RED);
            }
            g.fillRect(agent.getX(), agent.getY(), 10, 10);
        }
    }

    public static void main(String[] args) {
        new Ecosystem();
    }
}
