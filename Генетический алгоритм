import java.util.*;

public class GeneticAlgorithm {

    static final int POPULATION_SIZE = 100;
    static final int MAX_GENERATIONS = 1000;
    static final double MUTATION_RATE = 0.01;
    static final double ELITISM_RATE = 0.1;

    static class Individual {
        double x;
        double y;
        double fitness;

        Individual(double x, double y) {
            this.x = x;
            this.y = y;
            this.fitness = fitnessFunction(x, y);
        }

        static double fitnessFunction(double x, double y) {
            return 1 / (1 + x * x + y * y);
        }
    }

    public static void main(String[] args) {
        System.out.println("Starting Genetic Algorithm with Elitism Selection...");
        runGeneticAlgorithm(true); // Elitism
        System.out.println("\nStarting Genetic Algorithm with Roulette Selection...");
        runGeneticAlgorithm(false); // Roulette
    }

    public static void runGeneticAlgorithm(boolean useElitism) {
        List<Individual> population = initializePopulation();
        for (int generation = 0; generation < MAX_GENERATIONS; generation++) {
            Collections.sort(population, Comparator.comparing(ind -> -ind.fitness));
            List<Individual> newPopulation = new ArrayList<>();

            // Запоминаем элиту
            if (useElitism) {
                int elitismCount = (int) (ELITISM_RATE * POPULATION_SIZE);
                newPopulation.addAll(population.subList(0, elitismCount));
            }

            // Подбор особей и создание новой популяции
            while (newPopulation.size() < POPULATION_SIZE) {
                Individual parent1 = selectParent(population, useElitism);
                Individual parent2 = selectParent(population, useElitism);
                Individual child = crossover(parent1, parent2);
                mutate(child);
                newPopulation.add(child);
            }

            population = newPopulation;
        }

        Individual best = Collections.max(population, Comparator.comparing(ind -> ind.fitness));
        System.out.println("Best Individual: x=" + best.x + ", y=" + best.y + ", Fitness=" + best.fitness);
    }

    private static List<Individual> initializePopulation() {
        List<Individual> population = new ArrayList<>();
        Random rand = new Random();

        for (int i = 0; i < POPULATION_SIZE; i++) {
            double x = rand.nextDouble() * 200 - 100; // значения от -100 до 100
            double y = rand.nextDouble() * 200 - 100; // значения от -100 до 100
            population.add(new Individual(x, y));
        }
        return population;
    }

    private static Individual selectParent(List<Individual> population, boolean useElitism) {
        Random rand = new Random();
        if (useElitism) {
            // Отбор через турниры среди лучших
            return population.get(rand.nextInt((int)(POPULATION_SIZE * ELITISM_RATE)));
        } else {
            // Метод рулетки
            double totalFitness = population.stream().mapToDouble(ind -> ind.fitness).sum();
            double randomValue = rand.nextDouble() * totalFitness;
            double cumulative = 0;

            for (Individual individual : population) {
                cumulative += individual.fitness;
                if (cumulative >= randomValue) {
                    return individual;
                }
            }
        }
        return population.get(0); 
    }

    private static Individual crossover(Individual parent1, Individual parent2) {
        return new Individual(
                (parent1.x + parent2.x) / 2,
                (parent1.y + parent2.y) / 2
        );
    }

    private static void mutate(Individual individual) {
        Random rand = new Random();
        if (rand.nextDouble() < MUTATION_RATE) {
            individual.x += rand.nextGaussian(); // небольшое изменение
        }
        if (rand.nextDouble() < MUTATION_RATE) {
            individual.y += rand.nextGaussian(); // небольшое изменение
        }
        // Ограничиваем значения x и y
        individual.x = Math.max(-100, Math.min(100, individual.x));
        individual.y = Math.max(-100, Math.min(100, individual.y));
        individual.fitness = Individual.fitnessFunction(individual.x, individual.y); 
    }
}
